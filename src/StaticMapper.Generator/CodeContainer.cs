using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.Runtime.InteropServices;
using System.Text;

namespace StaticMapper.Generator;

public class CodeContainer(int runId, string fileName)
{
	public static readonly string NewLine = RuntimeInformation.IsOSPlatform(OSPlatform.Windows) ? "\r\n" : "\n";

	public HashSet<string> Usings { get; } = [];

	public StringBuilder Body { get; } = new StringBuilder();

	public int RunId { get; } = runId;

	public string FileName { get; } = fileName;


	public void AddCodeLine(string codeLine, string? usingNamespace = null, IEnumerable<string>? usingNamespaces = null)
	{
		Body.AppendLine(codeLine);
		if (!string.IsNullOrWhiteSpace(usingNamespace)) AddUsing(usingNamespace!);
		if (usingNamespaces != null) AddUsingRange(usingNamespaces);
	}

	public void AddUsing(string usingNamespace)
	{
		var a = $"using {usingNamespace.Trim()};";
		Usings.Add(a);
	}

	public void AddUsingRange(IEnumerable<string> usingNamespaces)
	{
		foreach (var item in usingNamespaces) AddUsing(item);
	}

	public void WriteExceptionAsComment(Exception exception)
	{
		Body.AppendLine("/*");
		WriteException(exception, "");
		Body.AppendLine("*/");
	}

	public void WriteCodeToFile(GeneratorExecutionContext context)
	{
		context.AddSource(FileName, SourceText.From(this.ToString(), Encoding.UTF8));
	}

	public override string ToString() =>
			$@"{CreateStringBuilderForCode()}
{(Usings.Count == 0 ? "" : ("// Usings :" + NewLine + string.Join(NewLine, Usings.OrderBy(x => x))))}

{Body}
";

	private void WriteException(Exception exception, string prepend)
	{
		Body.AppendLine($"{prepend}Exception : [{exception.GetType().Name}] {exception.Message}");
		Body.AppendLine($"{prepend}StackTrace : ");

		if (!string.IsNullOrWhiteSpace(prepend))
			Body.AppendLine(string.Join(prepend + NewLine, exception.StackTrace.Replace("\r", "").Split('\n')));
		else
			Body.AppendLine(exception.StackTrace);

		if (exception.InnerException != null)
		{
			WriteException(exception.InnerException, prepend + "--->");
		}
	}

	private string CreateStringBuilderForCode()
	{
		return $@"// ----------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:{System.Runtime.InteropServices.RuntimeInformation.FrameworkDescription}
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ----------------------------------------------------------------------------------------------
// File Name	: {FileName}
// Compile Time : {DateTime.Now}
// Counter		: {RunId}
";
	}

}
